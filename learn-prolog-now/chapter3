Exercise  3.2 Do you know these wooden Russian dolls (Matryoshka dolls) where the smaller ones are contained in bigger ones? Here is a schematic picture: 
First, write a knowledge base using the predicate directlyIn/2 which encodes which doll is directly contained in which other doll. Then, define a recursive predicate in/2 , that tells us which doll is (directly or indirectly) contained in which other dolls. For example, the query in(katarina,natasha) should evaluate to true, while in(olga,  katarina) should fail. 


directlyin(irina, natasha).
directlyin(natasha,olga).
directlyin(olga,katarina).

in(X,Y) :- directlyin(X,Y).
in(X,Y) :- directlyin(X,Z), in(Z,Y).

?- in(natasha,katarina). 	true
?- in(katarina,olga). 		false

 Exercise  3.3 We have the following knowledge base:
   directTrain(saarbruecken,dudweiler).
   directTrain(forbach,saarbruecken).
   directTrain(freyming,forbach).
   directTrain(stAvold,freyming).
   directTrain(fahlquemont,stAvold).
   directTrain(metz,fahlquemont).
   directTrain(nancy,metz).

That is, this knowledge base holds facts about towns it is possible to travel between by taking a direct train. But of course, we can travel further by chaining together direct train journeys. Write a recursive predicate travelFromTo/2 that tells us when we can travel by train between two towns. For example, when given the query
   travelFromTo(nancy,saarbruecken).

it should reply yes. 

travelFromTo(X,Y) :- directTrain(X,Y).
travelFromTo(X,Y) :- directTrain(X,Z),travelFromTo(Z,Y).


